---
- name: Homelab
  hosts: homelab
  vars:
    envs:
      - "HOMELAB_USER"
      - "PROJECT_DIR"
      - "LETSENCRYPT_CA_SERVER"
      - "LETSENCRYPT_EMAIL_ADDRESS"
      - "CLOUDFLARE_ACCOUNT_ID"
      - "CLOUDFLARE_ACCOUNT_EMAIL_ADDRESS"
      - "CLOUDFLARE_DNS_API_TOKEN"
      - "CLOUDFLARE_TUNNEL_ID"
      - "CLOUDFLARE_TUNNEL_TOKEN"
      - "ROOT_DOMAIN"
      - "GRAFANA_USER"
      - "GRAFANA_PASSWORD"
      - "PIHOLE_ADMIN_PASSWORD"
      - "GOOGLE_OAUTH_CLIENT_ID"
      - "GOOGLE_OAUTH_CLIENT_SECRET"
      - "SUPER_ADMIN_USERS"
      - "ADMIN_USERS"
      - "GUEST_USERS"
    credentials:
      - name: "watchtower_api_token"
        value: "{{ lookup('password', './credentials/watchtower_api_token length=16 chars=ascii_letters') }}"
      - name: "auth_secret"
        value: "{{ lookup('password', './credentials/auth_secret length=32 chars=ascii_letters') }}"
    project_dirs:
      - "{{ project_dir }}"
      - "{{ project_dir }}/cloudflared"
      - "{{ project_dir }}/letsencrypt"
      - "{{ project_dir }}/metrics"
      - "{{ project_dir }}/metrics/dashboards"
      - "{{ project_dir }}/authentication"
      - "{{ project_dir }}/pihole"
      - "{{ project_dir }}/pihole/dnsmasq.d"
      - "{{ project_dir }}/pihole/lighttpd"
    project_template_files:
      - src: "cloudflare/creds.json"
        dest: "{{ project_dir }}/cloudflared/creds.json"
      - src: "cloudflare/dnsconfig.js"
        dest: "{{ project_dir }}/cloudflared/dnsconfig.js"
      - src: "metrics/cadvisor-profile.json"
        dest: "{{ project_dir }}/metrics/cadvisor-profile.json"
      - src: "metrics/prometheus.yml"
        dest: "{{ project_dir }}/metrics/prometheus.yml"
      - src: "metrics/grafana.yml"
        dest: "{{ project_dir }}/metrics/grafana.yml"
      - src: "metrics/grafana.ini"
        dest: "{{ project_dir }}/metrics/grafana.ini"
      - src: "metrics/dashboard.yml"
        dest: "{{ project_dir }}/metrics/dashboards/dashboard.yml"
      - src: "authentication/auth.ini"
        dest: "{{ project_dir }}/authentication/config.ini"
      - src: "pihole/adlists.list"
        dest: "{{ project_dir }}/pihole/adlists.list"
      - src: "docker-compose.yml"
        dest: "{{ project_dir }}/docker-compose.yml"
    grafana_dashboards:
      - url: "https://grafana.com/api/dashboards/17346/revisions/9/download"
        dest: "{{ project_dir }}/metrics/dashboards/traefik.json"
        type: "url"
      - url: "https://raw.githubusercontent.com/containrrr/watchtower/76f9cea516593fabb8ca91ff13de55caa6aa0a8b/grafana/dashboards/dashboard.json"
        dest: "{{ project_dir }}/metrics/dashboards/watchtower.json"
        type: "url"
      - src: "metrics/docker-and-host-monitoring.json"
        dest: "{{ project_dir }}/metrics/dashboards/docker-and-host-monitoring.json"
        type: "local"
  tasks:
    - name: ping
      ping:
    - name: lookup envs
      set_fact:
        "{{ item | lower }}": "{{ lookup('env', item) }}"
      loop: "{{ envs }}"
    - name: generate credentials
      set_fact:
        "{{ item.name }}": "{{ item.value }}"
      loop: "{{ credentials }}"
    - name: create project directories
      file:
        path: "{{ item }}"
        state: "directory"
      loop: "{{ project_dirs }}"
      when: state == "present"
    - name: push files
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      loop: "{{ project_template_files }}"
      when: state == "present"
    - name: download grafana dashboards
      get_url:
        url: "{{ item.url }}"
        dest: "{{ item.dest }}"
      loop: "{{ grafana_dashboards }}"
      when: (state == "present") and (item.type == "url")
    - name: copy grafana dashboards
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      loop: "{{ grafana_dashboards }}"
      when: (state == "present") and (item.type == "local")
    - name: copy systemd service file
      template:
        src: "homelab.service"
        dest: "/etc/systemd/system/homelab.service"
      become: yes
      when: state == "present"
    - name: reload systemd
      systemd:
        name: "homelab"
        daemon_reload: true
        state: "reloaded"
      become: yes
      when: state == "present"
    - name: check homelab service file exists
      stat:
        path: "/etc/systemd/system/homelab.service"
      register: homelab_service_file_exists
    - name: stop homelab
      systemd:
        name: "homelab"
        daemon_reload: true
        state: "stopped"
      become: yes
      become_user: root
      when: state == "absent" and homelab_service_file_exists.stat.exists
    - name: delete systemd service file
      file:
        path: "/etc/systemd/system/homelab.service"
        state: "absent"
      become: yes
      when: state == "absent" and homelab_service_file_exists.stat.exists
    - name: delete project
      file:
        path: "{{ project_dirs[0] }}"
        state: "absent"
      when: state == "absent"
      become: yes
